<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ymf1234.github.io</id>
    <title>Gridea1</title>
    <updated>2019-09-27T07:10:30.642Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ymf1234.github.io"/>
    <link rel="self" href="https://ymf1234.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ymf1234.github.io/images/avatar.png</logo>
    <icon>https://ymf1234.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea1</rights>
    <entry>
        <title type="html"><![CDATA[Linux命令]]></title>
        <id>https://ymf1234.github.io/post/linux-ming-ling</id>
        <link href="https://ymf1234.github.io/post/linux-ming-ling">
        </link>
        <updated>2019-09-27T06:55:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="ln命令创建链接以及链接的删除和更新">ln命令创建链接以及链接的删除和更新</h3>
<h4 id="创建软连接">创建软连接</h4>
<pre><code class="language-shell">ln -s [源文件或目录] [目标文件或目录]

# 必须是全路径   
# 源文件或目录: /usr/share/nginx/html/
# 目标文件或目录 ~/html   
ln -s /usr/share/nginx/html/ ~/html    # 创建/usr/share/nginx/html/  引向 ~/html  文件夹 
</code></pre>
<h4 id="删除软链接">删除软链接</h4>
<pre><code class="language-shell"> rm –rf 软链接名称
 
 rm -rf ~/html
</code></pre>
<h4 id="修改软连接">修改软连接</h4>
<pre><code class="language-shell">ln –snf  [新的源文件或目录]  [目标文件或目录]

这将会修改原有的链接地址为新的地址


# 创建一个软链接

ln –s  /usr/share/nginx/html/  ~/html

# 修改指向的新路径

ln –snf  /usr/share/nginx/html1/  ~/html
</code></pre>
<h3 id="ln-注意">ln 注意</h3>
<blockquote>
<p>这里有三点要注意：
第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；
第二，ln的链接又软链接 和硬链接两种，
         软链接就是ln -s src  dst,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，
         硬链接ln src  dst,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 
第三，指向一个文件的所有 硬链接都删掉的话文件的内容才会被删掉
软链接只要删掉了源链接文件，软链接也就失效了</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第三方库pymysql使用]]></title>
        <id>https://ymf1234.github.io/post/python-di-san-fang-ku-pymysql-shi-yong</id>
        <link href="https://ymf1234.github.io/post/python-di-san-fang-ku-pymysql-shi-yong">
        </link>
        <updated>2019-09-27T06:22:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="连接数据库">连接数据库</h1>
<pre><code class="language-python3">import pymysql

a = pymysql.connect(host=&quot;127.0.0.1&quot;, port=3306, user=&quot;root&quot;, passwd='', db=&quot;pymysql&quot;)
a.cursor()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker基本操作]]></title>
        <id>https://ymf1234.github.io/post/docker-ji-ben-cao-zuo</id>
        <link href="https://ymf1234.github.io/post/docker-ji-ben-cao-zuo">
        </link>
        <updated>2019-09-27T05:44:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker">Docker</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker基本概念]]></title>
        <id>https://ymf1234.github.io/post/docker-ji-ben-gai-nian</id>
        <link href="https://ymf1234.github.io/post/docker-ji-ben-gai-nian">
        </link>
        <updated>2019-09-27T04:59:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="镜像">镜像</h1>
<h2 id="docker镜像">Docker镜像</h2>
<blockquote>
<p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。</p>
</blockquote>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h2 id="分层存储">分层存储</h2>
<blockquote>
<p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>
</blockquote>
<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<hr>
<h1 id="容器">容器</h1>
<h2 id="docker-容器">Docker 容器</h2>
<blockquote>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
</blockquote>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 容器存储层。</p>
<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>
<hr>
<h1 id="仓库">仓库</h1>
<h2 id="docker-registry">Docker Registry</h2>
<blockquote>
<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p>
</blockquote>
<p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>
<p>以 Ubuntu 镜像 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:16.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p>
<p>仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p>
<h2 id="docker-registry-公开服务">Docker Registry 公开服务</h2>
<blockquote>
<p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
</blockquote>
<p>最常使用的 Registry 公开服务是官方的 Docker Hub，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 CoreOS 的 Quay.io，CoreOS 相关的镜像存储在这里；Google 的 Google Container Registry，Kubernetes 的镜像使用的就是这个服务。</p>
<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有 阿里云加速器、DaoCloud 加速器 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 安装 Docker 一节中有详细的配置方法。</p>
<p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 时速云镜像仓库、网易云镜像服务、DaoCloud 镜像市场、阿里云镜像库 等。</p>
<h2 id="私有-docker-registry">私有 Docker Registry</h2>
<blockquote>
<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。在 私有仓库 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p>
</blockquote>
<p>开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 Docker Trusted Registry 中，提供了这些高级功能。</p>
<p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，Harbor 和 Sonatype Nexus。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云服务器ssh经常一段时间就断掉解决办法]]></title>
        <id>https://ymf1234.github.io/post/a-li-yun-fu-wu-qi-ssh-jing-chang-yi-duan-shi-jian-jiu-duan-diao-jie-jue-ban-fa</id>
        <link href="https://ymf1234.github.io/post/a-li-yun-fu-wu-qi-ssh-jing-chang-yi-duan-shi-jian-jiu-duan-diao-jie-jue-ban-fa">
        </link>
        <updated>2019-09-25T07:39:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vim-etcsshsshd_config">vim /etc/ssh/sshd_config</h1>
<p>找到下面两行</p>
<pre><code class="language-shell">ClientAliveInterval 0
ClientAliveCountMax 3
</code></pre>
<p>去掉注释，改成</p>
<pre><code class="language-shell">ClientAliveInterval 120
ClientAliveCountMax 0
</code></pre>
<p>这两行的意思分别是</p>
<p>1、客户端每隔多少秒向服务发送一个心跳数据</p>
<p>2、客户端多少秒没有相应，服务器自动断掉连接</p>
<p>重启sshd服务</p>
<p>#service sshd restart</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular创建组件]]></title>
        <id>https://ymf1234.github.io/post/angular-chuang-jian-zu-jian</id>
        <link href="https://ymf1234.github.io/post/angular-chuang-jian-zu-jian">
        </link>
        <updated>2019-09-11T05:38:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="创建组件">创建组件</h1>
<pre><code class="language-ng">ng generate component [name]
ng g component [name]
</code></pre>
<blockquote>
<p>示例</p>
</blockquote>
<pre><code class="language-shell">ng g component module-core/data-sync-config-management/data-sync-config-list

CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.less (0 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.html (40 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.spec.ts (715 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.ts (327 bytes)
UPDATE src/app/module-core/core.module.ts (4539 bytes)
</code></pre>
<hr>
<blockquote>
<p>示例创建了mydemo的组件。</p>
</blockquote>
<ol>
<li>在app的目录下新建了data-sync-config（即组件名）文件夹</li>
<li>在data-sync-config目录下分别创建data-sync-config-list组件的相关文件</li>
<li>html：data-sync-config-list.component.html</li>
<li>css：data-sync-config-list.component.less</li>
<li>spec：用于测试测data-sync-config-list.componnent.spec.ts</li>
<li>组件：data-sync-config-list.component.ts</li>
<li>更新app.module.ts，添加了MydemoComponent到模块的declarations声明里。</li>
</ol>
<hr>
<blockquote>
<p>直接创建组件</p>
</blockquote>
<p>指令默认会创建以组件命名的文件夹，可以使用--flat选项直接在当前目录创建组件。</p>
<pre><code class="language-shell"> ng g component --flat mydemo1
 create src/app/mydemo1.component.html (26 bytes)
 create src/app/mydemo1.component.spec.ts (635 bytes)
 create src/app/mydemo1.component.ts (274 bytes)
 create src/app/mydemo1.component.scss (0 bytes)
 update src/app/app.module.ts (749 bytes)
</code></pre>
<hr>
<blockquote>
<p>指定组件所属组件</p>
</blockquote>
<p>指令默认会把组件添加到app.module.ts的声明里，可以使用--module（简写-m）指定组件所属模块。</p>
<pre><code class="language-shell"> ng g component --flat -m mymodule mydemo2
 create src/app/mydemo2.component.html (26 bytes)
 create src/app/mydemo2.component.spec.ts (635 bytes)
 create src/app/mydemo2.component.ts (274 bytes)
 create src/app/mydemo2.component.scss (0 bytes)
 update src/app/mymodule/mymodule.module.ts (265 bytes)
</code></pre>
<hr>
<blockquote>
<p>内嵌模板和样式</p>
</blockquote>
<p>指令默认会新建html和css文件，使用--inline-style(简写-is)指定内嵌样式，使用--inline-template(简写-it)指定内嵌模板。</p>
<pre><code class="language-shell"> ng g component --flat --inline-style --inline-template mydemo3
 create src/app/mydemo3.component.spec.ts (635 bytes)
 create src/app/mydemo3.component.ts (259 bytes)
 update src/app/app.module.ts (827 bytes)
</code></pre>
<hr>
<blockquote>
<p>不创建测试文件</p>
</blockquote>
<p>指令默认会新建spec.ts文件。使用--spec=false不创建测试文件</p>
<pre><code class="language-shell"> ng g component --flat --spec=false mydemo5
 create src/app/mydemo5.component.html (26 bytes)
 create src/app/mydemo5.component.ts (274 bytes)
 create src/app/mydemo5.component.scss (0 bytes)
 update src/app/app.module.ts (983 bytes)
</code></pre>
<hr>
<blockquote>
<p>其他指令</p>
</blockquote>
<pre><code class="language-shell">--app (简写-a) ：指定app名称，默认值app
--change-detection (简写-cd)：指定变化检测策略
--export：指定是否在声明的模块导出组件，默认值false
--skip-import：是否忽略在模块添加组件声明，默认为false
--view-encapsulation (简写-ve)：指定view encapsulation策略。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7安装MongoDB]]></title>
        <id>https://ymf1234.github.io/post/centos-7-an-zhuang-mongodb</id>
        <link href="https://ymf1234.github.io/post/centos-7-an-zhuang-mongodb">
        </link>
        <updated>2019-09-05T13:57:01.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="安装mongodb">安装Mongodb</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="安装mongodb">安装Mongodb</h2>
<!-- more -->
<h3 id="配置系统yum源">配置系统yum源</h3>
<h4 id="1-创建repo文件生成mongodb的源">1. 创建.repo文件，生成mongodb的源</h4>
<pre><code>vim /etc/yum.repos.d/mongodb-org-4.0.repo
</code></pre>
<!-- more -->
<h4 id="2-添加以下配置信息">2. 添加以下配置信息：</h4>
<pre><code>[mongodb-org-4.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/#releasever/mongodb-org/4.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
</code></pre>
<p><strong>详解：</strong></p>
<pre><code>name         # 名称
baseurl      # 获得下载的路径
gpkcheck=1   # 表示对从这个源下载的rpm包进行校验；
enable=1     # 表示启用这个源。
gpgkey       # gpg验证
</code></pre>
<!-- more -->
<h4 id="3-保存退出">3. 保存退出</h4>
<pre><code>wq # 退出保存
</code></pre>
<!-- more -->
<br/>
### 使用yum安装MongoDB
<h4 id="1-安装mongodb">1. 安装MongoDB</h4>
<pre><code>sudo yum install -y mongodb-org
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f5b28ccc7fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<!-- more -->
<h4 id="2-验证安装结果">2. 验证安装结果</h4>
<pre><code>rpm -qa |grep mongodb
rpm -ql mongodb-org-server
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f602d81d242?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<!-- more -->
<h4 id="3-启动mongodb">3. 启动MongoDB</h4>
<p>启动MongoDB服务</p>
<pre><code>systemctl start mongod.service
</code></pre>
<p>MongoDB默认端口是27017，查看是否开启</p>
<pre><code>netstat -natp | grep 27017
</code></pre>
<p>检查数据库是否安装成功</p>
<pre><code>ps -aux | grep mongod    # 查看数据库的进程是否存在
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f668d37fb57?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<h4 id="4-验证服务开启">4. 验证服务开启</h4>
<pre><code>mongo
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f6cfc44f347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<br/>
<h3 id="常用命令清单">常用命令清单</h3>
<pre><code>// 1、开启MongoDB
sudo service mongod start  或者 systemctl start mongod.service  # 开启MongoDB
sudo chkconfig mongod on  # 加入开机启动
sudo service mongod restart # 重启MongoDB

// 2、关闭MongoDB
sudo service mongod stop  # 关闭防火墙

// 3、卸载MongoDB
sudo yum erase $(rpm -qa | grep mongodb-org)    # 卸载MongoDB
sudo rm -r /var/log/mongodb  # 删除日志文件
sudo rm -r /var/lib/mongo    # 删除数据文件
</code></pre>
<br/>
<h2 id="远程连接mongodb">远程连接Mongodb</h2>
<h3 id="1-修改配置文件mongodbconf">1. 修改配置文件mongodb.conf</h3>
<pre><code>vim /etc/mongod.conf

# network interfaces
net:
  port: 27017
  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.
</code></pre>
<p><strong>修改绑定ip默认127.0.0.1只允许本地连接， 所以修改为bindIp:0.0.0.0, 退出保存</strong></p>
<br/>
<h3 id="2-重启mongodb服务">2. 重启mongodb服务</h3>
<pre><code>sudo service mongod restart 
</code></pre>
<h3 id="3-开放对外端口">3. 开放对外端口</h3>
<p><strong>方法一</strong></p>
<pre><code>systemctl status firewalld  # 查看防火墙状态
firewall-cmd --zone=public --add-port=27017/tcp --permanent # mongodb默认端口号
firewall-cmd --reload  # 重新加载防火墙

firewall-cmd --zone=public --query-port=27017/tcp # 查看端口号是否开放成功，输出yes开放成功，no则失败
</code></pre>
<p><strong>方法二</strong></p>
<pre><code>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT
</code></pre>
<h3 id="4-远程连接">4. 远程连接</h3>
<p><strong>默认连接</strong></p>
<pre><code>mongo 10.128.218.14:27017
</code></pre>
<p><strong>连接到自定义的用户</strong></p>
<ol>
<li><strong>创建用户，设置账号，密码，权限</strong></li>
</ol>
<pre><code>// admin数据库
&gt; use admin
switched to db admin
&gt; db.createUser({ user:&quot;root&quot;, pwd:&quot;123456&quot;, roles:[&quot;root&quot;] })
Successfully added user: { &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;root&quot; ] }

// 其他数据库
&gt; use test
switched to db test
&gt; db.createUser({ user:&quot;admin&quot;, pwd:&quot;123456&quot;, roles:[&quot;readWrite&quot;, &quot;dbAdmin&quot;] })
Successfully added user: { &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;root&quot; ] }
</code></pre>
<ol start="2">
<li><strong>修改mongodb.conf文件，启用身份验证</strong></li>
</ol>
<pre><code>vim /etc/mongod.conf

security:
  authorization: &quot;enabled&quot;   # disable or enabled
</code></pre>
<ol start="3">
<li><strong>重启MongoDB</strong></li>
</ol>
<pre><code>sudo service mongod restart 
</code></pre>
<ol start="4">
<li><strong>用户认证</strong></li>
</ol>
<pre><code>&gt; use admin
switched to db admin
&gt; db.auth(&quot;root&quot;, &quot;123456&quot;)
1 // 授权成功

// 其他常用命令
db.updateUser(user, writeConcern) # 更新用户
db.dropUser('test') # 删除用户
</code></pre>
<ol start="5">
<li><strong>远程连接</strong></li>
</ol>
<pre><code>// 终端连接
mongo 10.128.218.14:27017:27017/database -u username -p password

// mongoose方式连接
mongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});

// 通过客户端连接
</code></pre>
<h3 id="用户权限角色说明">用户权限角色说明</h3>
<table>
<thead>
<tr>
<th>规则</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>root</strong></td>
<td>只在admin数据库中可用。超级账号，超级权限</td>
</tr>
<tr>
<td><strong>Read</strong></td>
<td>允许用户读取指定数据库</td>
</tr>
<tr>
<td><strong>readWrite</strong></td>
<td>允许用户读写指定数据库</td>
</tr>
<tr>
<td><strong>dbAdmin</strong></td>
<td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td>
</tr>
<tr>
<td><strong>userAdmin</strong></td>
<td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td>
</tr>
<tr>
<td><strong>clusterAdmin</strong></td>
<td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td>
</tr>
<tr>
<td><strong>readAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的读权限</td>
</tr>
<tr>
<td><strong>readWriteAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td>
</tr>
<tr>
<td><strong>userAdminAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td>
</tr>
<tr>
<td><strong>dbAdminAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td>
</tr>
</tbody>
</table>
<h1 id="参考文献">参考文献</h1>
<ul>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fu011305680%2Farticle%2Fdetails%2F52767230">yum使用详解</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Ftutorial%2Finstall-mongodb-on-red-hat%2F">Install MongoDB Community Edition on Red Hat Enterprise or CentOS Linux</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.linuxidc.com%2FLinux%2F2017-11%2F148495.htm">CentOS 7上MongoDB数据库安装和卸载</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F03aff57dfe46">ubuntu mongodb远程连接配置</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fmedium.com%2Fmongoaudit%2Fhow-to-enable-authentication-on-mongodb-b9e8a924efac">How to Enable Authentication on MongoDB</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Fmethod%2Fdb.createUser%2F">db.createUser()</a></strong></li>
</ul>
]]></content>
    </entry>
</feed>