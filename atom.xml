<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.yumengfei.cn/</id>
    <title>Gridea1</title>
    <updated>2019-10-17T05:57:11.277Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.yumengfei.cn/"/>
    <link rel="self" href="http://blog.yumengfei.cn//atom.xml"/>
    <subtitle>php docker mysql python</subtitle>
    <logo>http://blog.yumengfei.cn//images/avatar.png</logo>
    <icon>http://blog.yumengfei.cn//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea1</rights>
    <entry>
        <title type="html"><![CDATA[Linux常用命令指南【上】]]></title>
        <id>http://blog.yumengfei.cn//post/linux-chang-yong-ming-ling-zhi-nan-shang</id>
        <link href="http://blog.yumengfei.cn//post/linux-chang-yong-ming-ling-zhi-nan-shang">
        </link>
        <updated>2019-10-08T09:57:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-常用快捷键">一、常用快捷键</h3>
<ol>
<li>在Linux下有几个操作命令的快捷键</li>
</ol>
<blockquote>
<p>enter 执行命令。输入命令后记得回车，命令才生效。</p>
</blockquote>
<blockquote>
<p>tab 自动补全。在写文件夹路径的时候，打出首字母直接将后续名称补全，遇到首字母相同的文件夹会展示出列表</p>
</blockquote>
<blockquote>
<p>↑ 使用方向键的up键，可以找回上个执行的命令，并且可以一直向上查找历史命令，想查看所有历史命令使用 history命令</p>
</blockquote>
<blockquote>
<p>ctrl + c 中断命令。在linux上执行命令遇到卡死、报错等执行不下去又无法退出的情况，请使用此命令。</p>
</blockquote>
<blockquote>
<p>ctrl + z 中断命令。一般ctrl + c 无法进行中断操作的时候可以尝试下此命令。</p>
</blockquote>
<blockquote>
<p>ctrl + insert 复制。复制选中内容。</p>
</blockquote>
<blockquote>
<p>shift + insert 粘贴。粘贴剪切板中内容。</p>
</blockquote>
<blockquote>
<p>ctrl + Backspace 向前删除。</p>
</blockquote>
<blockquote>
<p>在输入命令时，有时退格键Backspace无法删除字符，它本身被当做一个字符输入了，使用此命令进行退格删除操作</p>
</blockquote>
<blockquote>
<p>delete 向后删除。</p>
</blockquote>
<ol start="2">
<li>查看日志文件时使用:</li>
</ol>
<blockquote>
<p>ctrl + s 停止滚屏
ctrl + q 恢复滚屏</p>
</blockquote>
<h3 id="二-帮助命令">二、 帮助命令</h3>
<blockquote>
<p>man 全方位的帮助命令，使用方式为 man [命令]，如</p>
</blockquote>
<pre><code class="language-shell">man ls
</code></pre>
<p>使用 :q 命令退出帮助界面</p>
<blockquote>
<p>help 常用帮助命令，使用方式为 [命令] --help，如</p>
</blockquote>
<pre><code class="language-shell">ls --help
</code></pre>
<h3 id="三-历史命令查看">三、历史命令查看</h3>
<pre><code class="language-shell">history
</code></pre>
<h3 id="四-常用命令">四、常用命令</h3>
<p><strong>1.1 文件及目录操作</strong>
<strong>1.1.1 路径切换的好基友：cd、ls、ll、pwd</strong></p>
<pre><code class="language-shell"># 进入主机根目录
cd /

# 进入用户根目录
cd ~

# 返回上级目录
cd ../

# 返回上次目录
cd -

# 使用绝对路径，从根目录开始,一层层找到XXX这个目录。/ 为根目录
cd /xx/xx/xxx/XXX

# 横向展示当前目录下所有文件及目录
ls

# 显示隐藏文件 + ls命令展示的内容 
ls -a

# 等同于ll，一般直接用ll命令。
ls -l

# 纵向展示当前目录下所有文件及目录，及权限信息
ll

# 显示隐藏文件 + ll命令展示的内容
ll -a

 # 将文件大小从单位bit转换为合适的单位展现，如kb、Mb、Gb，根据实际大小来。
 # -h 这个参数在linux中很有用，基本所有需要统计大小的命令中都可以用它，如df -h, du -h,free -h。
ll -h

# 查看当前所在路径
pwd

</code></pre>
<p><strong>1.1.2 文件创建：touch、mkdir</strong></p>
<pre><code class="language-shell"># 在当前目录下创建一个xxx.txt空文件
touch xxx.txt

# 批量创建空文件
touch /xxx/xxx/xxx{01..10}.txt
</code></pre>
<pre><code class="language-shell"># 在当前目录下创建一个空目录
mkdir [目录名]
</code></pre>
<pre><code class="language-shell"># 多个目录同时创建，目录间以空格隔开，创建同级的多个目录
mkdir 123 456 789

# 如果想要创建一个多级子目录怎么办，那就使用下面的mkdir -p。
# 多层目录同时创建，一次性在当前目录下创建xxx目录，在xxx目录下创建ccc目录，在ccc目录下创建vvv目录，在vvv目录下创建bbb目录。

mkdir -p /xxx/ccc/vvv/bbb
</code></pre>
<p><strong>1.1.3 复制、移动和删除：cp、mv、rm</strong></p>
<pre><code class="language-shell"># 将前者拷贝一份出来，变为后者。
cp [待拷贝文件名] [拷贝后文件名]

# 将前者拷贝一份出来，变为后者。文件如此，目录也是如此。
cp [待拷贝目录] [目标目录]

# 但是有时候目录下还有子目录，这个命令就不好用了，得用下面这个命令，cp -r/R。
# -r/R 是什么意思？即递归。无限寻找当前目录下所有子目录。倾其所有，拷贝到目标路径下。
cp -r [待拷贝目录] [目标目录]
</code></pre>
<pre><code class="language-shell"># 将前者的文件名改为后者的文件名
mv [待拷贝文件名] [拷贝后文件名]

# 将前者的文件名改为后者的文件名
mv [待移动目录] [目标目录]
</code></pre>
<pre><code class="language-shell"># 删除文件。文件不存在会有报错提示。
rm [文件名]

# 删除文件。-f，忽略信息，不提示。
rm -f [文件名]

# 递归删除目录
rm -rf [目录名]

# 删除多个文件和目录
rm -rf [文件1] [文件2] [目录1] [目录2]

# 删除当前目录所有.log后缀结尾的文件
rm -rf *.log

# 删除所有log文件时会一一询问，这个命令一般不会用到，但有些情况下可能会需要。
# 询问时，按 y 确认删除，n 不删除。
rm -i *.log
</code></pre>
<p><strong>1.2 文件查看与编辑</strong>
<strong>1.2.1 合并文件好帮手：cat</strong></p>
<pre><code class="language-shell"># 输出文件所有内容到屏幕上
cat [文件名]

# 输出文件1、文件2所有内容到屏幕上
cat [文件1] [文件2]

# 将文件1、文件2合并，输出到文件3中，如果没有文件3会自动生成一个新的文件3
cat [文件1] [文件2] &gt; [文件3]


# 输出文件内容时加上行号
cat -n [文件名]

# 输出文件内容时显示所有隐藏字符
cat -A [文件名]
</code></pre>
<p><strong>1.2.2 观察日志小能手：tail</strong></p>
<blockquote>
<p>tail 一般用来查看日志使用，显示文件最新追加的内容</p>
</blockquote>
<pre><code class="language-shell"># 不停地追加显示log文件的最后10行
tail -f xxx.log


# 加上-n参数，不停地追加显示log文件的最后1000行
tail -fn1000 xxx.log
</code></pre>
<blockquote>
<p>tail也可以同时显示多个文件内容，但是不推荐使用，如</p>
</blockquote>
<pre><code class="language-shell">tail -fn1000 xxx.log xxx2.log
</code></pre>
<blockquote>
<p>如果显示文件不止一个，则在显示的每个文件前面加一个文件名标题</p>
</blockquote>
<p><strong>1.2.3 编辑文件我拿手：vi/vim</strong></p>
<blockquote>
<p>vim有几种模式，即normal模式、visual模式、编辑模式、命令模式。</p>
</blockquote>
<pre><code class="language-shell"># 默认进入normal模式
vim [文件名]
</code></pre>
<blockquote>
<p>normal模式下按下i、a、o、s，进入编辑模式，使用频度一般也是这个顺序。</p>
</blockquote>
<pre><code class="language-shell"># insert, 光标当前字符前插入
i 

# append, 光标当前字符后插入
a

# 下一行插入
o

# 不常用，删除当前字符并插入
s
</code></pre>
<blockquote>
<p>光标移动</p>
</blockquote>
<pre><code class="language-shell">  
# 向左移动复制代码
←
 
# 向下移动复制代码
↓
 
# 向上移动复制代码
↑
 
# 向右移动复制代码
→

# 向下翻页复制代码
ctrl + f

# 向上翻页复制代码
ctrl + b

# 行首复制代码
0

# 行尾复制代码
$

# 空格键，一直向下移动一个字符。跟左方向键（→）的区别是，左方向键（→）只能在本行移动。
space

</code></pre>
<blockquote>
<p>如果觉得上下左右方向键不方便，还要移动手臂，可以在normal模式下，使用h、j、k、l键依次进行左、下、上、右操作。</p>
</blockquote>
<blockquote>
<p>退出、保存，在normal模式下使用冒号（:） 进入底线命令模式</p>
</blockquote>
<pre><code class="language-shell"># 退出不保存
:q

# 强制退出不保存
:q!


# 退出保存
:wq 

# 强制退出保存
:wq!
</code></pre>
<blockquote>
<p>normal模式下的一些快捷键</p>
</blockquote>
<pre><code class="language-shell"># 大写g，移动到文末。
G

# n，数字，代表行号。100G则是移动到第100行。1G则是行首。
nG

# 移动到文首。同样效果还有1G。
gg

# 分别代表high、middle、low，即移动当前屏幕页的最上方、中间、最下方。
H、M、L

# 删除当前行，可连续按d删除。
dd

# n,数字，代表行号。ndd，删除当前行及之后的多少行，如100dd，删除当前及之后的100行
ndd

# 进入复制模式
y

# 复制当前行。
yy

# n,数字，代表行号。聪明的你相比已经知道了，如16yy，即复制当前行至16行的内容。
nyy

# 粘贴当前vim剪切板中内容。
p

 # 常用组合键，即在上面使用yy复制后，可立即使用p粘贴，或者移动到指定地点后按个 p，即把刚才的内容粘贴过来了。
 yyp
 
# 全选复制。看这个命令，到行首，按y进入复制模式，再移动光标到文末，然后可以按p粘贴了。当然，如果你的光标已经移动到相应位置，可以直接ggyGp。
ggyG

# 这里有个缺陷，这样的复制内容只能在vim中进行粘贴，一旦退出vim，剪切板中则无此内容了。那怎么办呢？ 看下面这个命令

gg&quot;*yG、gg&quot;+yG   # 这两个全选复制的命令，可以将内容带出到vim之外。当然，一般用不到，只有某些特殊情况下会用到。

</code></pre>
<blockquote>
<p>查找</p>
</blockquote>
<pre><code class="language-shell"># 即向下寻找xxxx这个字符串。按n会一直向下找。
/xxxx

# 即向上寻找 xxxx 这个字符串。按n会一直向上找。
?xxxx

# 配合/、?则会很有趣，/ + n,一直向下找，/ + N,一直向上找， ? + n，一直向上找， ? + N，一直向下找。
n、N

</code></pre>
<blockquote>
<p>替换</p>
</blockquote>
<pre><code class="language-shell"># 全局替换，将old字符替换成new
:%s/old/new/g

# 如果不想全局替换，而是指定行数
:[n1],[n2]s/old/new/g

#将1到10行的xxx替换成了ccc。
例如： :1,10s/xxx/ccc/g
</code></pre>
<blockquote>
<p>显示行号</p>
</blockquote>
<pre><code class="language-shell"># 显示行号
:set number

# 同上，nu即是number的简写
:set nu
:set nonu

# # 查看文件格式，可能会展示foramt=dos，在windows下编辑然后上传到linux下的文件可能会存在一些格式问题，所以需要转换下文本格式，即下面的命令:set ff=unix
:set ff

# 设置文件格式，ff即format, 即文件设置为unix。可以设置后再用:set ff命令再看下
:set ff=unix
</code></pre>
<p><strong>1.2.4 more、less</strong></p>
<blockquote>
<p>more</p>
</blockquote>
<pre><code class="language-shell">more [文件名]

# 加参数f，-f 参数的含义为计算行数时，以实际上行数为准（有些单行字数太长的会被认为两行或以上）
more -f [文件名]

# 向下滚动一屏,f键效果一样，但一般使用空格键，比较方便
空格键

# 向上滚动一屏
b

# 查看当前行号
=

# 出当前文件名 及 行号
:f

# 退出more命令, ctrl + c也可以退出
q

# 查看指定行号以后的内容
more +[num] [文件名]
例如： more +1000 xxx.txt


# 查看指定行号以前的内容，这个命令一般不用，主要用+num。这个命令如果用的话一般会作为导出使用。
more -[num] [文件名]
例如：more -1000 xxx.txt
</code></pre>
<blockquote>
<p>less</p>
</blockquote>
<pre><code class="language-shell"># 基本查看命令
less [文件名]

# 类似more命令，显示百分比
less -m [文件名]

# 显示行号
less -N [文件名]


# 退出less命令
q

# 向下移动半屏
d

# 向上移动半屏
u

# 向下移动一行
j

# 向上移动一行
k

# 向下滚动一屏,f键效果一样，但一般使用空格键，比较方便
空格键

# 向上滚动一屏
b

# 输出当前文件名 及 行号、百分比
=

# 输出当前文件名 及 行号、百分比
: f

# 配合n键，从上往下查所有
/[查找字符]

# 配合n键，从下往下查所有
?[查找字符]
</code></pre>
<p><strong>1.2.5 不打开文件编辑：sed</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker之容器]]></title>
        <id>http://blog.yumengfei.cn//post/docker-zhi-rong-qi</id>
        <link href="http://blog.yumengfei.cn//post/docker-zhi-rong-qi">
        </link>
        <updated>2019-09-29T06:36:02.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一-查看镜像">一、查看镜像</h4>
<blockquote>
<p>查看所有容器: docker images</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ymf1234/images/master/docker/WeChatbeab20a80005e302e9a1a74aee1949c9.png" alt="avatar"></p>
<hr>
<h4 id="二-运行容器">二、运行容器</h4>
<blockquote>
<p>常用参数</p>
</blockquote>
<pre><code class="language-shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

[OPTIONS] 说明(常用)：
--name=&quot;容器的新名称&quot;：为容器指定一个名称；
-d： 在后台运行，并返回容器ID，也即启动守护式容器；
-i: 以交互模式运行容器
-t: 为容器重新分配一个伪输入端口
-P：随机端口映射
-p：指定端口映射，有一些四种格式
        ip:hostPort:containerPort
        ip::containerPort
        hostPort:containerPort
        containerPort
</code></pre>
<p><img src="https://raw.githubusercontent.com/ymf1234/images/master/docker/WeChat015fd08412ab4a1805a76733c952a177.png" alt="avatar"></p>
<blockquote>
<p>证明在容器里</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ymf1234/images/master/docker/WeChat015fd08412ab4a1805a76733c952a177.png" alt="avatar"></p>
<blockquote>
<p>退出容器</p>
</blockquote>
<pre><code>1、exit ： 容器停止退出
1、ctrl + P +Q ： 容器不停止退出
</code></pre>
<h4 id="三-查看容器">三、查看容器</h4>
<pre><code class="language-shell">docker ps [OPTIONS]

[OPTIONS] 说明(常用)：
-a: 列出当前所有在运行的容器 + 历史上运行过得
-l: 显示最近创建的容器
-n:显示最近n个穿件的容器
-q:静默模式，显示容器编号
--no-trunc:不截断输出
</code></pre>
<p><img src="https://raw.githubusercontent.com/ymf1234/images/master/docker/WeChat580d8ee96a372935126b973fc13c98b4.png" alt="avatar"></p>
<h4 id="四-启动容器">四、启动容器</h4>
<pre><code class="language-shell">docker start  CONTAINER 

例如： docker start 4050f42701ea
</code></pre>
<h4 id="五-停止容器">五、停止容器</h4>
<pre><code class="language-shell">docker stop  CONTAINER 

例如： docker stop 4050f42701ea


docker kill CONTAINER  # 强制

例如： docker kill 4050f42701ea
</code></pre>
<h4 id="五-重启容器">五、重启容器</h4>
<pre><code class="language-shell">docker restart  CONTAINER 

例如： docker restart 4050f42701ea
</code></pre>
<h4 id="六-删除容器">六、删除容器</h4>
<pre><code class="language-shell">docker rm CONTAINER

例如： docker rm 4050f42701ea


# 一次性删除多个容器

docker rm -f $(docker ps -a -q)

docker ps -a -q | xargs docker rm
</code></pre>
<h4 id="七-重要">七、重要</h4>
<h5 id="1启动守护式容器-docker-run-d-容器名称容器id">1.启动守护式容器: docker run -d 容器名称/容器ID</h5>
<p><img src="https://raw.githubusercontent.com/ymf1234/images/master/docker/WeChatbeab20a80005e302e9a1a74aee1949c9.png" alt="avatar"></p>
<blockquote>
<p>使用镜像以后台模式启动一个容器：例如： docker run -d 2ca708c1c9cc
<font color=red>重要</font>:  使用docker ps -a 进行查看，发现容器已经退出
重要说明一点：<font color=red>Docker容器在后台运行，就必须有一个前台进程</font>
容器运行的命令如果不是<font color=red>一直挂起的命令</font>（比如 运行top，tail），就会自动退出。</p>
</blockquote>
<h5 id="2查看容器日志docker-logs-f-t-tail-容器id">2.查看容器日志:docker logs -f -t --tail 容器ID</h5>
<pre><code class="language-shell">-t: 加入时间戳
-f: 跟随最新的日志打印
--tail: 数字 显示最后多少条
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker基本学习]]></title>
        <id>http://blog.yumengfei.cn//post/docker-ji-ben-xue-xi</id>
        <link href="http://blog.yumengfei.cn//post/docker-ji-ben-xue-xi">
        </link>
        <updated>2019-09-29T02:18:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-安装docker">一、安装Docker</h2>
<p>环境：CentOS7
首先更新yum: <code>sudo yum -y update</code>
然后执行安装命令：<code>sudo yum install -y docker</code>
Docker 默认位置：<code>/var/lib/docker</code></p>
<h2 id="二-管理docker">二、管理Docker</h2>
<ol>
<li><strong>管理 Docker 命令</strong></li>
</ol>
<p>启用 Docker</p>
<pre><code class="language-shell">sudo systemctl start docker
</code></pre>
<p>重启 Docker</p>
<pre><code class="language-shell">sudo systemctl restart docker
#使用命令查看Docker是否启动
ps -ef | grep docker 
</code></pre>
<p>关闭 Docker</p>
<pre><code class="language-shell">sudo systemctl stop docker
</code></pre>
<ol start="2">
<li><strong>Docker流程</strong></li>
</ol>
<p><img src="https://cdn.learnku.com/uploads/images/201909/10/48012/tnlEDMYz0M.png!/fw/1240" alt="avatar"></p>
<p>3、<strong>给当前用户赋予执行 docker 命令权限</strong></p>
<pre><code class="language-shell">#1、创建docker用户组
sudo groupadd docker
#2、将当前用户添加到docker组中 查看当前用户
sudo gpasswd -a${user} docker
#3、重启docker进程
sudo systemctl restart docker
#4、重新登录Xshell
</code></pre>
<h2 id="三-镜像加速器">三、镜像加速器</h2>
<ol>
<li>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">阿里云镜像加速地址</a></p>
<blockquote>
<p>地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</p>
</blockquote>
</li>
<li>
<p>配置镜像加速器</p>
</li>
</ol>
<p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<pre><code class="language-shell"># 创建目录   mkdir -p ：递归创建目录，即使上级目录不存在，会按目录层级自动创建目录
sudo mkdir -p /etc/docker

# tee命令主要被用来向standout(标准输出流，通常是命令执行窗口）输出的同时也将内容输出到文件
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
 &quot;registry-mirrors&quot;: [&quot;https://9o2noz1w.mirror.aliyuncs.com&quot;]
}
EOF

# 添加配置文件后需要加载
sudo systemctl daemon-reload

# 重启docker
sudo systemctl restart docker
</code></pre>
<h2 id="四-镜像">四、<strong>镜像</strong></h2>
<ol>
<li><strong>在线安装镜像</strong></li>
</ol>
<pre><code class="language-shell">#1、搜索java镜像
docker search java
#2、从dockerhub拉取并安装java镜像
docker pull docker.io/java
#安装指定版本镜像
#docker pull mysql:8.0
</code></pre>
<ol start="2">
<li><strong>镜像相关基础命令</strong></li>
</ol>
<pre><code class="language-shell">#查看所有镜像
docker images
#修改镜像名称
docker tag oldname newname
#备份镜像 (镜像导出)
docker sava java&gt;/home/java.tar.gz
#镜像导入
docker load &lt;/home/java.tar.gz
#删除镜像
docker rmi 镜像名或镜像ID
#查看镜像依赖
docker history imageid
</code></pre>
<ol start="3">
<li><strong>创建自己的镜像</strong></li>
</ol>
<pre><code class="language-shell">#在test文件夹下创建一个Dockerfile，并在文件中写入
#FROM centos
#CMD echo &quot;hello-docker!!!&quot;
sudo vi Dockerfile
#-t代表IMAGE的名称， .代表在本文件夹下的Dockerfile
docker build -t hello-docker .
</code></pre>
<ol start="4">
<li><strong>Dockerfile 语法</strong></li>
</ol>
<pre><code class="language-shell">#选取baseimage
FROM 
#scratch表示不依赖任何image，从头制作
FROM scratch

#镜像作者信息
LABEL
LABEL maintainer = &quot;LiLi@qq.com&quot;
LABEL version = &quot;1.0&quot;
LABEL description = &quot;this is description&quot;

#执行命令并创建新的image Layer
RUN
RUN yum update &amp;&amp; yum install -y vom \
    python-dev #反斜线换行
RUN apt-get update &amp;&amp; apt-get install -y perl \
    pwgen --no-install-recommends &amp;&amp; rm -rf \
    /var/lib/apt/lists/* #注意清理cache
RUN /bin/bash -c'source $HOME/.bashrc;echo$HOME'

#设定当前工作目录，类似于cd命令
WORKDIR
WORKDIR /root #如果没有会自动创建root
WORKDIR demo
RUN pwd #输出结果/root/demo

#将本地文件添加到docker image中
ADD and COPY
ADD hello / #将hello文件添加到跟目录
ADD test.tar.gz / #添加到根目录并解压
WORKDIR /root ADD hello test/ #添加到/root/test中
WORKDIR /root COPY hello test/
#ADD与COPY区别
ADD除了COPY还可以对tar.gz解压缩

#设置常量
ENV name = &quot;docker&quot;
#取值
$name

#存储和网络
VOLUME:存储
VOLUME home:/soft
-v /home:/soft
EXPOSE:网络相关

#设置容器启动后默认执行的命令和参数
#如果docker run指定了其他命令，CMD命令会被忽略
#如果定义了多个CMD，只有最后一个会执行
CMD

#设置容器启动时运行的命令
#让容器以应用程序或者服务的形式运行
#不会被忽略，一定会执行
ENTRYPOINT

</code></pre>
<ol start="5">
<li><strong>Docker 资料</strong></li>
</ol>
<blockquote>
<p>Docker 的 GitHub:[https://github.com/docker-library/]
Docker 的 文档：[https://docs.docker.com]</p>
</blockquote>
<h2 id="六-容器">六、容器</h2>
<ol>
<li><strong>容器基础命令</strong></li>
</ol>
<pre><code class="language-shell">#启动容器
docker run
#-it:代表交互式运行，进入docker环境
#--name代表容器名称
#-p 9000:8000 将宿主机9000端口映射到docker容器的800端口
#-v 将宿主机/home/project映射到容器的/soft目录
#--privileged 代表docker拥有操作宿主机文件的最高权限
docker run -it --name 容器名称 镜像名称 bash
docker run -it -p 9000:8080 -p 9001:8888  --name 容器名称  镜像名称  bash 
docker run -it -v /home/project:/soft --privileged  --name 容器名称 镜像名称 bash
#首先在原环境下mkdir一个test文件
#进入容器后在soft文件夹下创建一个touch docker.txt，并用echo &quot;hello-docker&quot; &gt; docker.txt写入txt文件中，使用cat命令查看所写的内容。结果：宿主机的/usr/gy/test中有文件hello.txt

#查看运行的容器
docker container ls -a
docker ps -a
#退出容器
exit
#暂停容器
docker pause 容器名称
#恢复容器运行
docker unpause 容器名称
#停止容器
docker stop 容器名称
#重新启动容器
docker start -i 容器名称
#删除容器，可以使用&quot;docker rm 容器id&quot;来删除一个终止状态的容器；若想要删除一个运行中的容器，需要加参数-f
sudo docker rm -f 容器id
#删除所有容器
docker rm `docker ps -a -q`
#删除所有退出的容器
docker rm $(docker container ls -f &quot;status=exited&quot; -q)
</code></pre>
<h2 id="七-镜像发布">七、镜像发布</h2>
<ol>
<li><strong>镜像上传到 dockerhub</strong></li>
</ol>
<p><em><strong>注意点：镜像名字：dockerhub - 用户名 / 镜像名称，否则就会出现无权限提示</strong></em></p>
<p>step1:docker login</p>
<p>登录 dockerhub</p>
<p>step2: docker push gy/imagename</p>
<p>step3: 验证：</p>
<p>方法一：登录 dockerhub 网站，找到提交的镜像</p>
<p>方法二：删除本地的镜像，重新拉去 dockerhub 上新提交的镜像</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composer]]></title>
        <id>http://blog.yumengfei.cn//post/composer</id>
        <link href="http://blog.yumengfei.cn//post/composer">
        </link>
        <updated>2019-09-27T09:13:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="composer查看系统全局配置">composer查看系统全局配置：</h1>
<blockquote>
<p>composer config -l -g</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux命令之ln]]></title>
        <id>http://blog.yumengfei.cn//post/linux-ming-ling</id>
        <link href="http://blog.yumengfei.cn//post/linux-ming-ling">
        </link>
        <updated>2019-09-27T06:55:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="ln命令创建链接以及链接的删除和更新">ln命令创建链接以及链接的删除和更新</h3>
<h4 id="创建软连接">创建软连接</h4>
<pre><code class="language-shell">ln -s [源文件或目录] [目标文件或目录]

# 必须是全路径   
# 源文件或目录: /usr/share/nginx/html/
# 目标文件或目录 ~/html   
ln -s /usr/share/nginx/html/ ~/html    # 创建/usr/share/nginx/html/  引向 ~/html  文件夹 
</code></pre>
<h4 id="删除软链接">删除软链接</h4>
<pre><code class="language-shell"> rm –rf 软链接名称
 
 rm -rf ~/html
</code></pre>
<h4 id="修改软连接">修改软连接</h4>
<pre><code class="language-shell">ln –snf  [新的源文件或目录]  [目标文件或目录]

这将会修改原有的链接地址为新的地址


# 创建一个软链接

ln –s  /usr/share/nginx/html/  ~/html

# 修改指向的新路径

ln –snf  /usr/share/nginx/html1/  ~/html
</code></pre>
<h3 id="ln-注意">ln 注意</h3>
<blockquote>
<p>这里有三点要注意：
第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；
第二，ln的链接又软链接 和硬链接两种，
         软链接就是ln -s src  dst,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，
         硬链接ln src  dst,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 
第三，指向一个文件的所有 硬链接都删掉的话文件的内容才会被删掉
软链接只要删掉了源链接文件，软链接也就失效了</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第三方库pymysql使用]]></title>
        <id>http://blog.yumengfei.cn//post/python-di-san-fang-ku-pymysql-shi-yong</id>
        <link href="http://blog.yumengfei.cn//post/python-di-san-fang-ku-pymysql-shi-yong">
        </link>
        <updated>2019-09-27T06:22:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="连接数据库">连接数据库</h1>
<pre><code class="language-python3">import pymysql

a = pymysql.connect(host=&quot;127.0.0.1&quot;, port=3306, user=&quot;root&quot;, passwd='', db=&quot;pymysql&quot;)
a.cursor()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker基本概念]]></title>
        <id>http://blog.yumengfei.cn//post/docker-ji-ben-gai-nian</id>
        <link href="http://blog.yumengfei.cn//post/docker-ji-ben-gai-nian">
        </link>
        <updated>2019-09-27T04:59:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="镜像">镜像</h1>
<h2 id="docker镜像">Docker镜像</h2>
<blockquote>
<p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。</p>
</blockquote>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h2 id="分层存储">分层存储</h2>
<blockquote>
<p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>
</blockquote>
<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<hr>
<h1 id="容器">容器</h1>
<h2 id="docker-容器">Docker 容器</h2>
<blockquote>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
</blockquote>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 容器存储层。</p>
<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>
<hr>
<h1 id="仓库">仓库</h1>
<h2 id="docker-registry">Docker Registry</h2>
<blockquote>
<p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p>
</blockquote>
<p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p>
<p>以 Ubuntu 镜像 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:16.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p>
<p>仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p>
<h2 id="docker-registry-公开服务">Docker Registry 公开服务</h2>
<blockquote>
<p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
</blockquote>
<p>最常使用的 Registry 公开服务是官方的 Docker Hub，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 CoreOS 的 Quay.io，CoreOS 相关的镜像存储在这里；Google 的 Google Container Registry，Kubernetes 的镜像使用的就是这个服务。</p>
<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有 阿里云加速器、DaoCloud 加速器 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。在 安装 Docker 一节中有详细的配置方法。</p>
<p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 时速云镜像仓库、网易云镜像服务、DaoCloud 镜像市场、阿里云镜像库 等。</p>
<h2 id="私有-docker-registry">私有 Docker Registry</h2>
<blockquote>
<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。在 私有仓库 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p>
</blockquote>
<p>开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 Docker Trusted Registry 中，提供了这些高级功能。</p>
<p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，Harbor 和 Sonatype Nexus。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云服务器ssh经常一段时间就断掉解决办法]]></title>
        <id>http://blog.yumengfei.cn//post/a-li-yun-fu-wu-qi-ssh-jing-chang-yi-duan-shi-jian-jiu-duan-diao-jie-jue-ban-fa</id>
        <link href="http://blog.yumengfei.cn//post/a-li-yun-fu-wu-qi-ssh-jing-chang-yi-duan-shi-jian-jiu-duan-diao-jie-jue-ban-fa">
        </link>
        <updated>2019-09-25T07:39:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vim-etcsshsshd_config">vim /etc/ssh/sshd_config</h1>
<p>找到下面两行</p>
<pre><code class="language-shell">ClientAliveInterval 0
ClientAliveCountMax 3
</code></pre>
<p>去掉注释，改成</p>
<pre><code class="language-shell">ClientAliveInterval 120
ClientAliveCountMax 0
</code></pre>
<p>这两行的意思分别是</p>
<p>1、客户端每隔多少秒向服务发送一个心跳数据</p>
<p>2、客户端多少秒没有相应，服务器自动断掉连接</p>
<p>重启sshd服务</p>
<blockquote>
<p>systemctl restart sshd.service</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular创建组件]]></title>
        <id>http://blog.yumengfei.cn//post/angular-chuang-jian-zu-jian</id>
        <link href="http://blog.yumengfei.cn//post/angular-chuang-jian-zu-jian">
        </link>
        <updated>2019-09-11T05:38:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="创建组件">创建组件</h1>
<pre><code class="language-ng">ng generate component [name]
ng g component [name]
</code></pre>
<blockquote>
<p>示例</p>
</blockquote>
<pre><code class="language-shell">ng g component module-core/data-sync-config-management/data-sync-config-list

CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.less (0 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.html (40 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.spec.ts (715 bytes)
CREATE src/app/module-core/data-sync-config-management/data-sync-config-list/data-sync-config-list.component.ts (327 bytes)
UPDATE src/app/module-core/core.module.ts (4539 bytes)
</code></pre>
<hr>
<blockquote>
<p>示例创建了mydemo的组件。</p>
</blockquote>
<ol>
<li>在app的目录下新建了data-sync-config（即组件名）文件夹</li>
<li>在data-sync-config目录下分别创建data-sync-config-list组件的相关文件</li>
<li>html：data-sync-config-list.component.html</li>
<li>css：data-sync-config-list.component.less</li>
<li>spec：用于测试测data-sync-config-list.componnent.spec.ts</li>
<li>组件：data-sync-config-list.component.ts</li>
<li>更新app.module.ts，添加了MydemoComponent到模块的declarations声明里。</li>
</ol>
<hr>
<blockquote>
<p>直接创建组件</p>
</blockquote>
<p>指令默认会创建以组件命名的文件夹，可以使用--flat选项直接在当前目录创建组件。</p>
<pre><code class="language-shell"> ng g component --flat mydemo1
 create src/app/mydemo1.component.html (26 bytes)
 create src/app/mydemo1.component.spec.ts (635 bytes)
 create src/app/mydemo1.component.ts (274 bytes)
 create src/app/mydemo1.component.scss (0 bytes)
 update src/app/app.module.ts (749 bytes)
</code></pre>
<hr>
<blockquote>
<p>指定组件所属组件</p>
</blockquote>
<p>指令默认会把组件添加到app.module.ts的声明里，可以使用--module（简写-m）指定组件所属模块。</p>
<pre><code class="language-shell"> ng g component --flat -m mymodule mydemo2
 create src/app/mydemo2.component.html (26 bytes)
 create src/app/mydemo2.component.spec.ts (635 bytes)
 create src/app/mydemo2.component.ts (274 bytes)
 create src/app/mydemo2.component.scss (0 bytes)
 update src/app/mymodule/mymodule.module.ts (265 bytes)
</code></pre>
<hr>
<blockquote>
<p>内嵌模板和样式</p>
</blockquote>
<p>指令默认会新建html和css文件，使用--inline-style(简写-is)指定内嵌样式，使用--inline-template(简写-it)指定内嵌模板。</p>
<pre><code class="language-shell"> ng g component --flat --inline-style --inline-template mydemo3
 create src/app/mydemo3.component.spec.ts (635 bytes)
 create src/app/mydemo3.component.ts (259 bytes)
 update src/app/app.module.ts (827 bytes)
</code></pre>
<hr>
<blockquote>
<p>不创建测试文件</p>
</blockquote>
<p>指令默认会新建spec.ts文件。使用--spec=false不创建测试文件</p>
<pre><code class="language-shell"> ng g component --flat --spec=false mydemo5
 create src/app/mydemo5.component.html (26 bytes)
 create src/app/mydemo5.component.ts (274 bytes)
 create src/app/mydemo5.component.scss (0 bytes)
 update src/app/app.module.ts (983 bytes)
</code></pre>
<hr>
<blockquote>
<p>其他指令</p>
</blockquote>
<pre><code class="language-shell">--app (简写-a) ：指定app名称，默认值app
--change-detection (简写-cd)：指定变化检测策略
--export：指定是否在声明的模块导出组件，默认值false
--skip-import：是否忽略在模块添加组件声明，默认为false
--view-encapsulation (简写-ve)：指定view encapsulation策略。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7安装MongoDB]]></title>
        <id>http://blog.yumengfei.cn//post/centos-7-an-zhuang-mongodb</id>
        <link href="http://blog.yumengfei.cn//post/centos-7-an-zhuang-mongodb">
        </link>
        <updated>2019-09-05T13:57:01.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="安装mongodb">安装Mongodb</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="安装mongodb">安装Mongodb</h2>
<!-- more -->
<h3 id="配置系统yum源">配置系统yum源</h3>
<h4 id="1-创建repo文件生成mongodb的源">1. 创建.repo文件，生成mongodb的源</h4>
<pre><code>vim /etc/yum.repos.d/mongodb-org-4.0.repo
</code></pre>
<!-- more -->
<h4 id="2-添加以下配置信息">2. 添加以下配置信息：</h4>
<pre><code>[mongodb-org-4.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/#releasever/mongodb-org/4.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
</code></pre>
<p><strong>详解：</strong></p>
<pre><code>name         # 名称
baseurl      # 获得下载的路径
gpkcheck=1   # 表示对从这个源下载的rpm包进行校验；
enable=1     # 表示启用这个源。
gpgkey       # gpg验证
</code></pre>
<!-- more -->
<h4 id="3-保存退出">3. 保存退出</h4>
<pre><code>wq # 退出保存
</code></pre>
<!-- more -->
<br/>
### 使用yum安装MongoDB
<h4 id="1-安装mongodb">1. 安装MongoDB</h4>
<pre><code>sudo yum install -y mongodb-org
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f5b28ccc7fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<!-- more -->
<h4 id="2-验证安装结果">2. 验证安装结果</h4>
<pre><code>rpm -qa |grep mongodb
rpm -ql mongodb-org-server
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f602d81d242?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<!-- more -->
<h4 id="3-启动mongodb">3. 启动MongoDB</h4>
<p>启动MongoDB服务</p>
<pre><code>systemctl start mongod.service
</code></pre>
<p>MongoDB默认端口是27017，查看是否开启</p>
<pre><code>netstat -natp | grep 27017
</code></pre>
<p>检查数据库是否安装成功</p>
<pre><code>ps -aux | grep mongod    # 查看数据库的进程是否存在
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f668d37fb57?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<h4 id="4-验证服务开启">4. 验证服务开启</h4>
<pre><code>mongo
</code></pre>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/23/16a47f6cfc44f347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="avatar"></p>
<br/>
<h3 id="常用命令清单">常用命令清单</h3>
<pre><code>// 1、开启MongoDB
sudo service mongod start  或者 systemctl start mongod.service  # 开启MongoDB
sudo chkconfig mongod on  # 加入开机启动
sudo service mongod restart # 重启MongoDB

// 2、关闭MongoDB
sudo service mongod stop  # 关闭防火墙

// 3、卸载MongoDB
sudo yum erase $(rpm -qa | grep mongodb-org)    # 卸载MongoDB
sudo rm -r /var/log/mongodb  # 删除日志文件
sudo rm -r /var/lib/mongo    # 删除数据文件
</code></pre>
<br/>
<h2 id="远程连接mongodb">远程连接Mongodb</h2>
<h3 id="1-修改配置文件mongodbconf">1. 修改配置文件mongodb.conf</h3>
<pre><code>vim /etc/mongod.conf

# network interfaces
net:
  port: 27017
  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.
</code></pre>
<p><strong>修改绑定ip默认127.0.0.1只允许本地连接， 所以修改为bindIp:0.0.0.0, 退出保存</strong></p>
<br/>
<h3 id="2-重启mongodb服务">2. 重启mongodb服务</h3>
<pre><code>sudo service mongod restart 
</code></pre>
<h3 id="3-开放对外端口">3. 开放对外端口</h3>
<p><strong>方法一</strong></p>
<pre><code>systemctl status firewalld  # 查看防火墙状态
firewall-cmd --zone=public --add-port=27017/tcp --permanent # mongodb默认端口号
firewall-cmd --reload  # 重新加载防火墙

firewall-cmd --zone=public --query-port=27017/tcp # 查看端口号是否开放成功，输出yes开放成功，no则失败
</code></pre>
<p><strong>方法二</strong></p>
<pre><code>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT
</code></pre>
<h3 id="4-远程连接">4. 远程连接</h3>
<p><strong>默认连接</strong></p>
<pre><code>mongo 10.128.218.14:27017
</code></pre>
<p><strong>连接到自定义的用户</strong></p>
<ol>
<li><strong>创建用户，设置账号，密码，权限</strong></li>
</ol>
<pre><code>// admin数据库
&gt; use admin
switched to db admin
&gt; db.createUser({ user:&quot;root&quot;, pwd:&quot;123456&quot;, roles:[&quot;root&quot;] })
Successfully added user: { &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;root&quot; ] }

// 其他数据库
&gt; use test
switched to db test
&gt; db.createUser({ user:&quot;admin&quot;, pwd:&quot;123456&quot;, roles:[&quot;readWrite&quot;, &quot;dbAdmin&quot;] })
Successfully added user: { &quot;user&quot; : &quot;root&quot;, &quot;roles&quot; : [ &quot;root&quot; ] }
</code></pre>
<ol start="2">
<li><strong>修改mongodb.conf文件，启用身份验证</strong></li>
</ol>
<pre><code>vim /etc/mongod.conf

security:
  authorization: &quot;enabled&quot;   # disable or enabled
</code></pre>
<ol start="3">
<li><strong>重启MongoDB</strong></li>
</ol>
<pre><code>sudo service mongod restart 
</code></pre>
<ol start="4">
<li><strong>用户认证</strong></li>
</ol>
<pre><code>&gt; use admin
switched to db admin
&gt; db.auth(&quot;root&quot;, &quot;123456&quot;)
1 // 授权成功

// 其他常用命令
db.updateUser(user, writeConcern) # 更新用户
db.dropUser('test') # 删除用户
</code></pre>
<ol start="5">
<li><strong>远程连接</strong></li>
</ol>
<pre><code>// 终端连接
mongo 10.128.218.14:27017:27017/database -u username -p password

// mongoose方式连接
mongoose.connect('mongodb://username:password@host:port/database?options...', {useNewUrlParser: true});

// 通过客户端连接
</code></pre>
<h3 id="用户权限角色说明">用户权限角色说明</h3>
<table>
<thead>
<tr>
<th>规则</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>root</strong></td>
<td>只在admin数据库中可用。超级账号，超级权限</td>
</tr>
<tr>
<td><strong>Read</strong></td>
<td>允许用户读取指定数据库</td>
</tr>
<tr>
<td><strong>readWrite</strong></td>
<td>允许用户读写指定数据库</td>
</tr>
<tr>
<td><strong>dbAdmin</strong></td>
<td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td>
</tr>
<tr>
<td><strong>userAdmin</strong></td>
<td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td>
</tr>
<tr>
<td><strong>clusterAdmin</strong></td>
<td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td>
</tr>
<tr>
<td><strong>readAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的读权限</td>
</tr>
<tr>
<td><strong>readWriteAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td>
</tr>
<tr>
<td><strong>userAdminAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td>
</tr>
<tr>
<td><strong>dbAdminAnyDatabase</strong></td>
<td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td>
</tr>
</tbody>
</table>
<h1 id="参考文献">参考文献</h1>
<ul>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fu011305680%2Farticle%2Fdetails%2F52767230">yum使用详解</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Ftutorial%2Finstall-mongodb-on-red-hat%2F">Install MongoDB Community Edition on Red Hat Enterprise or CentOS Linux</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.linuxidc.com%2FLinux%2F2017-11%2F148495.htm">CentOS 7上MongoDB数据库安装和卸载</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F03aff57dfe46">ubuntu mongodb远程连接配置</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fmedium.com%2Fmongoaudit%2Fhow-to-enable-authentication-on-mongodb-b9e8a924efac">How to Enable Authentication on MongoDB</a></strong></li>
<li><strong><a href="https://link.juejin.im?target=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Fmethod%2Fdb.createUser%2F">db.createUser()</a></strong></li>
</ul>
]]></content>
    </entry>
</feed>